Aug 29
#############################################
326. Power of Three
class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n==3 || n==1) return true;
        else if(n!=0 && n%3 ==0) return isPowerOfThree(n/3);
        else return false;
    }
};
//没想到不用递归和循环的方法


################################################
231 Power of Two

class Solution {
public:
    /*bool isPowerOfTwo(int n) {
        int ret;
        if(n<=0) return false;
        else if(n==1) return true;
        while(n>=2){
            if(n%2 !=0) return false;
            n = n/2;
        }
        return true;
    }*/
bool isPowerOfTwo(int n) {
        if(n == 0) return false;
        else{
            while((n & 0x1) == 0){
                n = n >> 1;
            }
            if(n==1) return true;
            else return false;

        }
    }

};
//位操作，如果是n>>1 而不是 n=n>>1; n没有改变


###########################################
342 Power of Four

class Solution {
public:
    bool isPowerOfFour(int n) {
        if(n <= 0) return false;
        //n = n & 0x7FFF;//remove signed
        else{
            while((n & 0x1) == 0 && ( (n & 0x2) ==0)){
                n = n >> 2;
            }
            if(n==1) return true;
            else return false;

        }
    }

};

####################################
191. Number of 1 Bits

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int num = 0;
        while(n>0){
            if((n&0x1) ==1){
                num++;
            }
            n = n>>1;
        }
        return num;
    }
};


#######################################
190. Reverse Bits

class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        uint32_t ret=0;
        for(int i=0;i<31;i++){
            if( (n&0x1) == 1){
                ret = (ret|0x1)<<1;
                n = n>>1;
            }else{
                ret = ret<<1;
                n = n>>1;
            }
        }
        if(n&0x1) ret = ret|0x1;
        return ret;
    }
};

####################################
136. Single Number

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ret=0;
        for(int i=0;i<nums.size();i++){
            ret = ret ^ nums[i];
        }
        return ret;
        
    }
    /*
    int singleNumber(vector<int>& nums) {
        unordered_set<int> iset;
        pair<unordered_set<int>::iterator,bool> ret;
        for(int i=0;i<nums.size();i++){
            ret = iset.insert(nums[i]);
            if(ret.second == false) iset.erase(ret.first);
        }
        return *(iset.begin());
        
    }
    */
};


###################################
389. Find the Difference
String t is generated by random shuffling string s and then add one more letter at a random position
s = "abcd"
t = "abcde"
output: 'e'

class Solution {
public:
    char findTheDifference(string s, string t) {
        char ret ='a';
        int i = 0;
        for(i=0;i<t.size();i++){
            ret = ret ^ s[i] ^ t[i];
        }
        ret = ret ^ t[i] ^ 'a';
        return ret;
    }
};
